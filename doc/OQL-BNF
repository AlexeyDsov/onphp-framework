$Id$

	<query> ::=
		[ <aggregate_clause> ]
		"from" <class_clause>
		[ "where" <where_clause> ]
		[ "group by" <group_by_clause> ]
		[ "order by" <order_by_clause> ]
		[ "having" <having_clause> ]
		[ "limit" <limit_clause> ]
		[ "offset" <offset_clause> ]
	
	<aggregate_clause> ::=
		(
			( ( "sum" | "avg" | "min" | "max" ) "(" <arithmetic_expression> ")" )
			| ( "count(" [ "distinct" ] <logical_expression> ")" )
			| ( [ "distinct" ] <logical_expression> )
		) [ "as" <identifier> ]
		[ "," <aggregate_clause> ]
	
	<class_clause> ::=
		<identifier>
	
	<where_clause> ::=
		<logical_expression>
	
	<group_by_clause> ::=
		<identifier> [ "," <group_by_clause> ]
	
	<order_by_clause> ::=
		<logical_expression> [ "asc" | "desc" ] [ "," <order_by_clause> ]
	
	<having_clause> ::=
		<logical_expression>
	
	<limit_clause> ::=
		<number> | <placeholder>
	
	<offset_clause> ::=
		<number> | <placeholder>
	
	<logical_expression> ::=
		<logical_and_expression> { [ "or" ] <logical_and_expression> }
	
	<logical_and_expression> ::=
		<logical_term> { [ "and" ] ( <logical_term> | ( "(" <logical_expression> ")" ) ) }
	
	<logical_term> ::=
		( "not" <logical_expression> )
		| (
			( <arithmetic_expression> | <boolean> | <string> )
			(
				( <comparison_op> <arithmetic_expression> )
				| ( "is" ( "not null" | "true" | "false" ) )
				| ( [ "not" ] "in (" <in_expression> ")" )
				| ( [ "not" ] ( "like" | "ilike" | "similar to" ) <pattern> )
				| ( "between" <between_expression> "and" <between_expression> )
			)
		)
	
	<arithmetic_expression> ::=
		[ "-" ] <arithmetic_mul_expression> { ( "+" | "-" ) <arithmetic_mul_expression> }
	
	<arithmetic_mul_expression> ::=
		<arithmetic_term> { ( "*" | "/" ) ( <arithmetic_term> | ( "(" <arithmetic_expression> ")" ) }
	
	<arithmetic_term> ::=
		<identifier> | <number> | <placeholder>
	
	<comparison_op> ::=
		"=" | "<" | ">" | "<>" | "!=" | "<=" | ">="
	
	<in_expression> ::=
		<constant> [ "," <in_expression> ]
	
	<between_expression> ::=
		<arithmetic_expression> | <string>
	
	<pattern> ::=
		<string> | <placeholder>
	
	<constant> ::=
		<string> | <number> | <boolean> | <placeholder> | "null"
	
	<boolean> ::=
		"true" | "false"
	
	<string> ::=
		( """ { <any character> } """ )
		| ( "'" { <any character> } "'" )
		| ( "`" { <any character> } "`" )
	
	<identifier> ::=
		( <letter> | "_" ) { <letter> | <digit> | "_" } [ "." <identifier> ]
	
	<number> ::=
		[ { <digit> } ] [ "." ] { <digit> } [ "e" [ "+" | "-" ] { <digit> } ] 
	
	<placeholder> ::=
		"$" { <digit> }


Examples:
	from User where id = $1

	count(id) as count, count(distinct Name) as distinctCount from User

	(id + -$1) / 2 as idExpression, distinct id from User
	where (Name not ilike 'user%') and id <= 10 and created between $2 and $3
	order by id desc, Name asc
	limit 10 offset $2

	from User having $1 > 0 group by id