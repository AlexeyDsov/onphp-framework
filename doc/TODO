# $Id$

* FIXME: make core/Types/Integer.class.php to work on x86, not only x86_64.

* views: improved hierarchy, ex: relative 'parts', absolute '/parts', parent
'../parts'.  see urls transformation in GenericUri for logic.

* primitives refactoring:

form2object: maybe always use getValue, why lists are special?

define SimpleType and ComplexType interfaces (to use setter or dropper in b/o)

anonymous primitives (split fields and types).
Such primitives cannot be required or optional - it's field property
(case: we want to set field type but do not know, it is required or optional)

make uniform lists: PrimitiveList()->of(AnonymousPrimitive)

error codes as enumeration objects, useful for debugging and organizing primitives inheritance.

move all inner stuff from Form to PrimitiveForm

* application:

RequestUrl: aggregator for subdomain, subpath, and query vars.

ApplicationRequest: request DTO.

NavigationSchema: xsd-based rewriter for RequestUrl <-> ApplicationRequest.

ApplicationUrl: factory for easy producing urls of any kind.

ApplicationController: Controller implementation for ApplicationRequest.

ApplicationModel: response, annotated with xsd.

* flow

think about controller's protos for splitting forms creation and importing
from business logic

OQL: make "from" clause bindable.

OQL: determine parameters numbers in bindAll if array keys doesn't correspond them. 

OQL: allow "count(field)" syntax in "having" clause
(shortcut to bindNext(SQLFunction::create('count', 'field'))).

OQL: allow expressions with aggregate functions in select "properties" clause
(e.g. 'count(field) + avg(field) > 0 from Entity group by field').

OQL: implement GroupByClassProjection and ClassProjection using "*" in select clauses.
 
OQL: insert and update queries.

OQL: search for key tokens upon tokenization and build simpler grammars
(e.g. if no arithmetic operators found then don't use arithmetic expression rules)

* FloatRange from 1.0