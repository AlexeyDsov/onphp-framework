<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2012-12-27 11:36:54                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	class TestCityEntityProto extends EntityProto
	{
		/**
		 * @return TestCityEntityProto
		 */
		public static function me()
		{
			return new self;
		}

		public function getFormMapping()
		{
			$primitiveList = TestCity::proto()->makeForm()->getPrimitiveList();

			unset($primitiveList['id']);
			$primitiveList['_onlyMoscowCapital'] = Primitive::rule(
				'_onlyMoscowCapital',
				$this->getExprOnlyMoscowCapital()
			);
			$primitiveList['_firstLetterUpper'] = $this->getRuleFirstLetterUpper();

			return $primitiveList;
		}

		/**
		 * @return LogicalObject
		 */
		private function getExprOnlyMoscowCapital()
		{
			return Expression::orBlock(
				Expression::andBlock(
					Expression::eq('Moscow', FormField::create('name')),
					Expression::isTrue(FormField::create('capital'))
				),
				Expression::andBlock(
					Expression::notEq('Moscow', FormField::create('name')),
					Expression::isFalse(FormField::create('capital'))
				)
			);
		}

		private function getRuleFirstLetterUpper()
		{
			$callback = function(Form $form) {
				if ($name = $form->getValue('name')) {
					if ($name[0] != mb_strtoupper($name[0])) {
						return false;
					}
				}
				return true;
			};

			return Primitive::rule(
				'_firstLetterUpper',
				CallbackLogicalObject::create($callback)
			);
		}
	}
?>